{"version":3,"sources":["index.tsx"],"names":["MaazterDownloader","NativeModules","getViewManagerConfig","viewManagerName","version","PlatformConstants","reactNativeVersion","minor","UIManager","callFunction","ref","func","args","dispatchViewManagerCommand","Commands","PlayerView","MaazterDownloaderTyped","events","EventMap","downloadChange","downloadRemove","idle","eventEmitter","NativeEventEmitter","Downloader","add","contentId","contentUri","encKey","quality","data","remove","pause","reason","resume","pauseAll","resumeAll","listDownloads","getTracks","urlPath","addListener","name","callback","listener","push","removeListener","event","find","filter"],"mappings":"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","sourcesContent":["import {\n  requireNativeComponent,\n  ViewStyle,\n  findNodeHandle,\n  UIManager,\n  NativeModules,\n  NativeEventEmitter\n} from 'react-native';\nconst { MaazterDownloader } = NativeModules\n\ntype MaazterPlayerProps = {\n  theme: string;\n  buttonState: string;\n  source: object;\n  resizeMode: string;\n  onCreate: () => void;\n  onDestroy: () => void;\n  onFullscreenChange: () => void;\n  onPlayStateChange: () => void;\n  onQualityChange: () => void;\n  onPlaybackSpeedChange: () => void;\n  onVideoSizeChange: () => void;\n  onProgress: () => void;\n  onBackClick: () => void;\n  onPreviousClick: () => void;\n  onNextClick: () => void;\n  onSettingsClick: () => void;\n  onError: () => void;\n  style: ViewStyle;\n  markers: object,\n  playFrom: () => void\n};\n\nconst getViewManagerConfig = (viewManagerName: string) => {\n  const version = NativeModules.PlatformConstants.reactNativeVersion.minor;\n  if (version >= 58) {\n    return UIManager.getViewManagerConfig(viewManagerName);\n  } else {\n    return (UIManager as any)[viewManagerName];\n  }\n};\n\nfunction callFunction(ref: any, func: string, args: any[] = []) {\n  UIManager.dispatchViewManagerCommand(\n    findNodeHandle(ref),\n    getViewManagerConfig(\"MaazterPlayerView\")\n      .Commands[func],\n    args\n  );\n}\n\ninterface DownloaderInterface {\n  add(contentId: string, contentUri: string, encKey: string | null, quality: object, data: string | null): Promise<any>;\n  remove(contentId: string): Promise<any>;\n  pause(contentId: string, reason?: number): Promise<any>;\n  resume(contentId: string): Promise<any>;\n  pauseAll(): Promise<any>;\n  resumeAll(): Promise<any>;\n  listDownloads(): Promise<any>;\n  getTracks(urlPath: string, encKey: string | null): Promise<any>;\n\n  addListener(name: string, callback: Function): any;\n  removeListener(name: string, callback: Function): any;\n}\n\nconst PlayerView = requireNativeComponent<MaazterPlayerProps>('MaazterPlayerView');\nconst MaazterDownloaderTyped = MaazterDownloader as DownloaderInterface\n\nconst events: Record<string, Array<any>> = {};\nconst EventMap: Record<string, string> = {\n  downloadChange: \"onDownloadChanged\",\n  downloadRemove: \"onDownloadRemoved\",\n  idle: \"onIdle\"\n}\n\nconst eventEmitter = new NativeEventEmitter(MaazterDownloader);\nconst Downloader: DownloaderInterface = {\n  add(contentId: string, contentUri: string, encKey: string | null, quality: object, data: string | null): Promise<any> {\n    return MaazterDownloaderTyped.add(contentId, contentUri, encKey, quality, data)\n  },\n  remove(contentId: string): Promise<any> {\n    return MaazterDownloaderTyped.remove(contentId)\n  },\n  pause(contentId: string, reason?: number): Promise<any> {\n    return MaazterDownloaderTyped.pause(contentId, reason)\n  },\n  resume(contentId: string): Promise<any> {\n    return MaazterDownloaderTyped.resume(contentId)\n  },\n  pauseAll(): Promise<any> {\n    return MaazterDownloaderTyped.pauseAll()\n  },\n  resumeAll(): Promise<any> {\n    return MaazterDownloaderTyped.resumeAll()\n  },\n  listDownloads(): Promise<any> {\n    return MaazterDownloaderTyped.listDownloads()\n  },\n  getTracks(urlPath: string, encKey: string | null): Promise<any> {\n    return MaazterDownloaderTyped.getTracks(urlPath, encKey)\n  },\n\n  addListener(name: string, callback: (...args: any[]) => any): any {\n    name = EventMap[name]\n    events[name] = events[name] || [];\n    const listener: any = eventEmitter.addListener(name, callback);\n    events[name].push([callback, listener]);\n  },\n\n  removeListener(name: string, callback: (...args: any[]) => any): any {\n    name = EventMap[name]\n    const event = events[name].find((listener => listener[0] === callback));\n    event[1].remove()\n    events[name] = events[name].filter((listener => listener[0] !== callback));\n  }\n}\n\nexport default PlayerView\n\nexport {\n  Downloader,\n  PlayerView,\n  callFunction\n}\n"]}